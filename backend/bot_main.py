from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import *
from aiogram.types import *
from aiogram import types, F
from aiogram.fsm.storage.memory import MemoryStorage

from dotenv import load_dotenv

from database import db 

from pathlib import Path

from fastapi.middleware.cors import CORSMiddleware

from fastapi import FastAPI

import aiohttp
import os 
import json
import base64
import urllib
import time
import asyncio
import logging

import uvicorn



load_dotenv()


app = FastAPI()


bot = Bot(
    token=os.getenv('BOT_TOKEN'),
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

storage = MemoryStorage()
dp = Dispatcher(bot=bot, storage=storage)


logger = logging.getLogger(__name__)



PROVIDER_TOKEN = os.getenv('PROVIDER_TOKEN')



# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ñ–æ—Ç–æ
photo_storage = {}



app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –¥–æ–º–µ–Ω—ã (–¥–ª—è —Ç–µ—Å—Ç–∞)
    allow_methods=["*"],
    allow_headers=["*"],
)



@app.on_event("startup")
async def on_startup():
    try:
        
        await db.connect(
            unix_socket=os.getenv('DB_UNIX_SOCKET'),
            user=os.getenv('DB_USER'),
            password=os.getenv('PASSWORD'),
            db=os.getenv('DB_NAME'),
            port=os.getenv('DB_PORT')
        )
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        test_result = await db.fetch_one("SELECT 1")
        logger.info(f"–¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î: {test_result}")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ñ–æ–Ω–µ
        asyncio.create_task(dp.start_polling(bot))
        logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        
    except Exception as e:
        logger.critical(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise 
    
    
    

@dp.message(Command("start"))
async def start(message: types.Message):
    if not message.text.startswith('/start payment_success_'):
        
        main_kb = [
            [types.KeyboardButton(text="üìö –ñ—É—Ä–Ω–∞–ª—ã")],
            [types.KeyboardButton(text="üìù –û–ø–∏—Å–∞–Ω–∏–µ")],
            [types.KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
        ]
        
        keyboard = types.ReplyKeyboardMarkup(
            keyboard=main_kb,
            resize_keyboard=True,
            input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª"
        )
        
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω –∂—É—Ä–Ω–∞–ª–∞ '–ò–≥–ª–∞'!",
            reply_markup=keyboard
        )
    
    
        
        

@dp.message(F.text == "üìö –ñ—É—Ä–Ω–∞–ª—ã")
async def show_journals(message: types.Message):
    try:
        if not db.pool:
            await message.answer("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î")
            return
            
        journals = await db.get_all_journals()
        
        if not journals:
            await message.answer("üì≠ –ñ—É—Ä–Ω–∞–ª—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
            return

        kb = types.InlineKeyboardMarkup(inline_keyboard=[])
        
        for journal in journals:
            kb.inline_keyboard.append([
                types.InlineKeyboardButton(
                    text=f"{journal['title']} ({journal['year']}) - {journal['price']}‚ÇΩ",
                    callback_data=f"journal_{journal['id']}"
                )
            ])
        
        kb.inline_keyboard.append([
            types.InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")
        ])
        
        await message.answer(
            "üìö <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤—ã–ø—É—Å–∫–∏:</b>",
            reply_markup=kb,
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∂—É—Ä–Ω–∞–ª–æ–≤: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∂—É—Ä–Ω–∞–ª–æ–≤")
        
        
        
@dp.callback_query(F.data.startswith("journal_"))
async def handle_journal_selection(callback: types.CallbackQuery):
    try:
        # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "query is too old"
        await callback.answer("‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ–º –∂—É—Ä–Ω–∞–ª...")
        
        journal_id = int(callback.data.split("_")[1])
        journal = await db.get_journal_by_id(journal_id)
        
        if not journal:
            await callback.message.answer("‚ùå –ñ—É—Ä–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        quantity = journal.get('quantity', 0)
        available_text = f"üõí –í –Ω–∞–ª–∏—á–∏–∏: {quantity} —à—Ç." if quantity > 0 else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            f"<b>{journal['title']}</b>\n"
            f"–ì–æ–¥: {journal['year']}\n"
            f"–¶–µ–Ω–∞: {float(journal['price'])}‚ÇΩ\n"
            f"{available_text}\n\n"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
        kb = InlineKeyboardMarkup(inline_keyboard=[])
        
        if quantity > 0:
            kb.inline_keyboard.append([
                InlineKeyboardButton(
                    text="üõí –ö—É–ø–∏—Ç—å —Å–µ–π—á–∞—Å", 
                    web_app=WebAppInfo(
                        url=f"https://tottotdanetot.github.io/iglaboq/frontend/templates/miniapp/shop.html?"
                        f"journal={journal_id}&"
                        f"title={urllib.parse.quote(journal.get('title', ''))}&"
                        f"year={journal.get('year', '')}&"
                        f"price={journal.get('price', '')}&"
                        f"description={urllib.parse.quote(journal.get('description', ''))}&"
                        f"quantity={quantity}&"
                        f"v={int(time.time())}"
                    )
                )
            ])
        
        kb.inline_keyboard.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_journals")
        ])
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞ –∏–∑ API
        photo_url = None
        try:
            async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(total=30)) as session:
                async with session.get(f'https://dismally-familiar-sharksucker.cloudpub.ru/get_journal_bot_images/{journal_id}') as response:
                    if response.status == 200:
                        response_text = await response.text()
                        
                        try:
                            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
                            if isinstance(response_text, str):
                                bot_images_data = json.loads(response_text)
                            else:
                                bot_images_data = response_text
                            
                            if isinstance(bot_images_data, dict):
                                bot_images = bot_images_data.get('images', [])
                            else:
                                bot_images = []
                                
                        except json.JSONDecodeError:
                            bot_images = []
                        
                        if bot_images:
                            # –ò—â–µ–º –≥–ª–∞–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ
                            if isinstance(bot_images[0], dict):
                                main_image = next((img for img in bot_images if img.get('is_main')), bot_images[0])
                                # –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–û–£–¢ –î–õ–Ø –ñ–£–†–ù–ê–õ–û–í –° –ö–≠–®–ï–ú!
                                image_filename = main_image['image_url'].split('/')[-1]
                                photo_url = f'https://dismally-familiar-sharksucker.cloudpub.ru/fast_bot_journal/journal_{journal_id}/{image_filename}'
                            else:
                                # –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–û–£–¢ –î–õ–Ø –ñ–£–†–ù–ê–õ–û–í –° –ö–≠–®–ï–ú!
                                image_filename = bot_images[0].split('/')[-1]
                                photo_url = f'https://dismally-familiar-sharksucker.cloudpub.ru/fast_bot_journal/journal_{journal_id}/{image_filename}'
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–æ—Ç–∞: {str(e)}")
        
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å —Ñ–æ—Ç–æ - –ò–°–ü–û–õ–¨–ó–£–ï–ú –ü–†–Ø–ú–û–ô URL –ö –ù–û–í–û–ú–£ –†–û–£–¢–£
        if photo_url:
            try:
                logger.info(f"üöÄ Trying to send photo with cached URL: {photo_url}")
                
                # –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ü–†–Ø–ú–û –ü–û URL –ö –ù–û–í–û–ú–£ –ö–≠–®–ò–†–£–Æ–©–ï–ú–£ –†–û–£–¢–£
                await callback.message.answer_photo(
                    photo=photo_url,  # ‚Üê URL –∫ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É —Ä–æ—É—Ç—É!
                    caption=message_text,
                    reply_markup=kb,
                    parse_mode="HTML"
                )
                logger.info("‚úÖ Photo sent successfully via cached URL")
                return
                
            except Exception as e:
                logger.error(f"‚ùå Error sending photo via cached URL: {str(e)}")
                
                # Fallback: —Å–∫–∞—á–∏–≤–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ bytes
                try:
                    logger.info("üîÑ Trying fallback: download and send as bytes")
                    async with aiohttp.ClientSession() as session:
                        async with session.get(photo_url) as resp:
                            if resp.status == 200:
                                image_data = await resp.read()
                                
                                await callback.message.answer_photo(
                                    photo=types.BufferedInputFile(image_data, filename="journal.jpg"),
                                    caption=message_text,
                                    reply_markup=kb,
                                    parse_mode="HTML"
                                )
                                logger.info("‚úÖ Photo sent via fallback method")
                                return
                            else:
                                logger.error(f"‚ùå Failed to download image: {resp.status}")
                
                except Exception as fallback_error:
                    logger.error(f"‚ùå Fallback also failed: {fallback_error}")
        
        # Fallback: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        logger.info("üìù Sending text only (no photo available)")
        await callback.message.answer(
            message_text,
            reply_markup=kb,
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"‚ùå Error loading journal: {str(e)}")
        try:
            await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∂—É—Ä–Ω–∞–ª–∞")
        except:
            pass
        
        
        
@dp.message(Command("journals"))
async def handle_journals_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /journals –∏–∑ –º–µ–Ω—é"""
    await show_journals(message)



@dp.message(F.text == "üìù –û–ø–∏—Å–∞–Ω–∏–µ")
async def show_description(message: types.Message):
    """–ü–æ–∫–∞–∑ –æ–ø–∏—Å–∞–Ω–∏—è"""
    try:
        content_data = await get_bot_content('description')
        
        if not content_data or (not content_data['images'] and not content_data['content']['text_content']):
            await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if content_data['images']:
            main_image = next((img for img in content_data['images'] if img['is_main']), content_data['images'][0])
            
            await message.answer_photo(
                photo=main_image['image_url'],
                caption=content_data['content']['text_content'] or "–û–ø–∏—Å–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞",
                parse_mode="HTML"
            )
        else:
            await message.answer(
                content_data['content']['text_content'] or "–û–ø–∏—Å–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞", 
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ–ø–∏—Å–∞–Ω–∏—è")



@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def show_contacts(message: types.Message):
    """–ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        content_data = await get_bot_content('contacts')
        
        if not content_data or (not content_data['images'] and not content_data['content']['text_content'] and not content_data['buttons']):
            await message.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        kb = InlineKeyboardMarkup(inline_keyboard=[])
        
        for btn in content_data['buttons']:
            kb.inline_keyboard.append([
                InlineKeyboardButton(text=btn['button_text'], url=btn['button_url'])
            ])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏ –µ—Å—Ç—å
        if content_data['images']:
            main_image = next((img for img in content_data['images'] if img['is_main']), content_data['images'][0])
            
            await message.answer_photo(
                photo=main_image['image_url'],
                caption=content_data['content']['text_content'] or "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                reply_markup=kb,
                parse_mode="HTML"
            )
        else:
            await message.answer(
                content_data['content']['text_content'] or "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã",
                reply_markup=kb,
                parse_mode="HTML"
            )
            
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")



async def get_bot_content(content_type: str):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ –±–∞–∑—ã"""
    try:
        content = await db.fetch_one(
            "SELECT * FROM bot_content WHERE content_type = %s",
            (content_type,)
        )
        
        if not content:
            return None
        
        images = await db.fetch_all(
            "SELECT * FROM bot_images WHERE content_id = %s ORDER BY is_main DESC, id",
            (content['id'],)
        )
        
        buttons = []
        if content_type == 'contacts':
            buttons = await db.fetch_all(
                "SELECT * FROM bot_buttons WHERE content_id = %s ORDER BY position",
                (content['id'],)
            )
        
        return {
            "content": content,
            "images": images,
            "buttons": buttons
        }
        
    except Exception as e:
        print(f"Error getting bot content: {e}")
        return None
    
    
    
@dp.message(Command("description"))
async def handle_description_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /description –∏–∑ –º–µ–Ω—é"""
    await show_description(message)



@dp.message(Command("contacts"))
async def handle_contacts_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /contacts –∏–∑ –º–µ–Ω—é"""
    await show_contacts(message)
    
    

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="journals", description="–ü–æ–∫–∞–∑–∞—Ç—å –∂—É—Ä–Ω–∞–ª—ã"),
        BotCommand(command="description", description="–û–ø–∏—Å–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–æ–≤"),
        BotCommand(command="contacts", description="–ö–æ–Ω—Ç–∞–∫—Ç—ã")
    ]
    await bot.set_my_commands(commands)



async def on_startup(bot: Bot):
    await set_bot_commands(bot)
        



@dp.callback_query(F.data == "back_to_journals")
async def back_to_journals(callback: types.CallbackQuery):
    await show_journals(callback.message)


@dp.callback_query(F.data == "back_to_main")
async def back_to_main(callback: types.CallbackQuery):
    await start(callback.message)



if __name__ == "__main__":
    uvicorn.run(app, host="127.0.0.1", port=8000)

