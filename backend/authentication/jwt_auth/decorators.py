from functools import wraps
from flask import request, current_app, redirect, url_for, jsonify

import jwt




def jwt_required(f):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    @wraps(f)
    def decorated_function(*args, **kwargs):
        # üî• –ü–†–û–í–ï–†–Ø–ï–ú, –£–ñ–ï –õ–ò –ü–†–û–®–õ–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø –í MIDDLEWARE
        if hasattr(request, 'jwt_user') and request.jwt_user:
            # Middleware —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
            return f(*args, **kwargs)
        
        # –ï—Å–ª–∏ middleware –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º–∏
        token = request.cookies.get('jwt_token')
        
        if not token:
            if request.path.startswith('/api/'):
                return jsonify({'error': 'Authentication required'}), 401
            else:
                return redirect(url_for('web_auth.web_login'))
        
        try:
            payload = jwt.decode(
                token, 
                current_app.secret_key,
                algorithms=['HS256'],
                options={"verify_exp": True}
            )
            request.jwt_user = payload
        except Exception as e:
            print(f"JWT verification failed: {e}")
            response = redirect(url_for('web_auth.web_login'))
            response.set_cookie('jwt_token', '', expires=0)
            return response
        
        return f(*args, **kwargs)
    return decorated_function



# # JWT required –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
# def jwt_required(f):
#     """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π)"""
#     @wraps(f)
#     def decorated_function(*args, **kwargs):
#         # –¢–æ–∫–µ–Ω —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω –≤ before_request, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ –Ω–∞–ª–∏—á–∏–µ
#         if not hasattr(request, 'jwt_user'):
#             if request.path.startswith('/api/'):
#                 return jsonify({'error': 'Authentication required'}), 401
#             else:
#                 return redirect(url_for('login'))
#         return f(*args, **kwargs)
#     return decorated_function