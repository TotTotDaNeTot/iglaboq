from flask import request, redirect, url_for, jsonify

from .token_utils import verify_jwt_token




def check_jwt_authentication():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º JWT –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    print(f"üîç Checking: {request.method} {request.path} (endpoint: {request.endpoint})")
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ endpoints
    public_endpoints = ['web_auth.web_login', 'auth.api_login', 'static', 'api_auth_login']
    public_paths = ['/api/auth/login', '/login', '/web_auth/login']
    
    if request.endpoint in public_endpoints or request.path in public_paths:
        print(f"‚úÖ Skipping auth for: {request.endpoint or request.path}")
        return
    
    # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ cookie
    token = request.cookies.get('jwt_token')
    print(f"üç™ JWT Cookie: {token}")
    
    if not token:
        print("‚ùå No JWT token in cookie")
        if request.path.startswith('/api/'):
            response = jsonify({'error': 'Authentication required'})
            response.status_code = 401
            return response
        else:
            return redirect(url_for('web_auth.web_login'))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    payload = verify_jwt_token(token)
    if not payload:
        print("‚ùå Invalid JWT token")
        if request.path.startswith('/api/'):
            response = jsonify({'error': 'Invalid token'})
            response.status_code = 401
            response.set_cookie('jwt_token', '', expires=0, path='/', domain='localhost')
            return response
        else:
            response = redirect(url_for('web_auth.web_login'))
            response.set_cookie('jwt_token', '', expires=0, path='/', domain='localhost')
            return response
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    request.jwt_user = payload
    print(f"‚úÖ Authenticated user: {payload['username']} (is_admin: {payload.get('is_admin', False)})") 