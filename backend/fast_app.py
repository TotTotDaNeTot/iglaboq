import os
import sys
from pathlib import Path
from contextlib import asynccontextmanager
from typing import Optional

from fastapi import FastAPI, Depends, HTTPException, Request, status
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.security import OAuth2PasswordBearer
from fastapi.responses import JSONResponse, HTMLResponse

from pydantic import BaseModel

from backend.database import db



# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π
sys.path.append('/Users/kirill/Desktop/testBot')
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

BASE_DIR = Path(__file__).parent.parent
sys.path.append(str(BASE_DIR))






from bot_main import bot


@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("üöÄ Starting up...")
    await db.connect()
    print("‚úÖ Database connected")
    
    # ‚≠ê‚≠ê‚≠ê –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú DB –î–õ–Ø –í–°–ï–• –ú–û–î–£–õ–ï–ô ‚≠ê‚≠ê‚≠ê
    from authentication.jwt_auth import token_utils
    token_utils.db = db
     
    from authentication.web_auth import routes
    routes.db = db
    
    from authentication.auth import routes
    routes.db = db
    
    from admin import admin_routes
    admin_routes.db = db
    
    from admin import journal_routes  
    journal_routes.db = db
    
    from admin import orders_routes
    orders_routes.db = db
    orders_routes.bot = bot
    
    from admin import bot_routes
    bot_routes.db = db
    
    from backend.services import bot_notifications
    bot_notifications.db = db
    
    from backend.services import email_service
    email_service.db = db  
    
    
    from authentication.auth.routes import router as auth_router
    from authentication.web_auth.routes import router as web_auth_router
    from admin.admin_routes import router as admin_router
    from admin.journal_routes import router as journal_router
    from admin.orders_routes import router as orders_router
    from admin.bot_routes import router as bot_router

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    app.include_router(auth_router)
    app.include_router(web_auth_router)
    app.include_router(journal_router)
    app.include_router(admin_router, prefix="/admin")
    app.include_router(orders_router)
    app.include_router(bot_router)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º templates –¥–ª—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π
    import admin.admin_routes
    admin.admin_routes.templates = templates

    import authentication.web_auth.routes  
    authentication.web_auth.routes.templates = templates

    import admin.journal_routes
    admin.journal_routes.templates = templates

    import admin.orders_routes
    admin.orders_routes.templates = templates
    
    yield  # –ó–¥–µ—Å—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
    
    # Shutdown  
    print("üõë Shutting down...")
    await db.close()
    print("‚úÖ Database disconnected")
    



# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI —Å lifespan
app = FastAPI(
    title="Admin Panel", 
    version="1.0.0",
    lifespan=lifespan  # ‚Üê –ü–ï–†–ï–î–ê–ï–ú LIFESPAN –ó–î–ï–°–¨
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:5006"],  # —è–≤–Ω—ã–π origin
    allow_credentials=True,  # —Ä–∞–∑—Ä–µ—à–∏—Ç—å –∫—É–∫–∏
    allow_methods=["*"],
    allow_headers=["*"],
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã –∏ —à–∞–±–ª–æ–Ω—ã
frontend_static_dir = BASE_DIR / "frontend" / "static"
frontend_templates_dir = BASE_DIR / "frontend" / "templates" / "admin_dashboard"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
frontend_static_dir.mkdir(parents=True, exist_ok=True)
frontend_templates_dir.mkdir(parents=True, exist_ok=True)

app.mount("/static", StaticFiles(directory=str(frontend_static_dir)), name="static")
templates = Jinja2Templates(directory=str(frontend_templates_dir))





# JWT
SECRET_KEY = os.getenv("ADMIN_SECRET_KEY")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="/api/auth/login")

# –ú–æ–¥–µ–ª–∏
class LoginRequest(BaseModel):
    username: str
    password: str

class UserResponse(BaseModel):
    id: int
    username: str
    email: str




from fastapi import Request
from authentication.jwt_auth.token_utils import verify_jwt_token
from fastapi.responses import RedirectResponse

@app.middleware("http")
async def jwt_middleware(request: Request, call_next):
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
    if request.url.path in ["/", "/web_auth/login", "/api/auth/login", "/health", "/debug-token"]:
        return await call_next(request)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º JWT —Ç–æ–∫–µ–Ω –∏–∑ cookie
    jwt_token = request.cookies.get("jwt_token")
    print(f"üç™ JWT Middleware: token from cookie = {jwt_token}")
    
    if not jwt_token:
        print("‚ùå No JWT token found in cookies")
        return RedirectResponse(url="/web_auth/login", status_code=303)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    payload = await verify_jwt_token(jwt_token)
    if not payload:
        print("‚ùå JWT token verification failed")
        response = RedirectResponse(url="/web_auth/login", status_code=303)
        response.delete_cookie("jwt_token")
        return response
    
    print(f"‚úÖ JWT token valid: {payload}")
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ request state –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞—Ö
    request.state.user = payload
    
    return await call_next(request)



# ‚≠ê‚≠ê‚≠ê –≠–ù–î–ü–û–ò–ù–¢ –î–õ–Ø –û–¢–õ–ê–î–ö–ò –¢–û–ö–ï–ù–ê ‚≠ê‚≠ê‚≠ê
@app.get("/debug-token")
async def debug_token(request: Request):
    token = request.cookies.get("jwt_token")
    if not token:
        return {"error": "No token found in cookies"}
    
    try:
        import jwt
        payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        return {
            "token": token[:50] + "..." if len(token) > 50 else token,
            "payload": payload, 
            "valid": True,
            "cookies": dict(request.cookies)
        }
    except Exception as e:
        return {
            "token": token[:50] + "..." if len(token) > 50 else token,
            "error": str(e), 
            "valid": False,
            "cookies": dict(request.cookies)
        }




@app.get("/debug-admins")
async def debug_admins():
    try:
        admins = await db.fetch_all("SELECT id, username, password_hash FROM admins")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∞—Ç–µ —Ö—ç—à–∞
        for admin in admins:
            hash_str = admin['password_hash']
            if isinstance(hash_str, bytes):
                admin['hash_type'] = 'bytes'
                admin['hash_preview'] = hash_str[:20]  # –ø–µ—Ä–≤—ã–µ 20 –±–∞–π—Ç
            else:
                admin['hash_type'] = 'string' 
                admin['hash_preview'] = hash_str[:50]  # –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤
                admin['hash_length'] = len(hash_str)
                
        return {"admins": admins}
    except Exception as e:
        return {"error": str(e), "type": type(e).__name__}


@app.get("/debug-auth")
async def debug_auth(request: Request):
    return {
        "cookies": dict(request.cookies),
        "has_jwt": "jwt_token" in request.cookies,
        "jwt_token": request.cookies.get("jwt_token", "NOT_FOUND")[:50] + "..." if request.cookies.get("jwt_token") else None
    }
    


# –ë–∞–∑–æ–≤—ã–µ —Ä–æ—É—Ç—ã
@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("admin/login.html", {"request": request})

@app.get("/health")
async def health_check():
    return {"status": "ok", "database": "connected"}


# –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ Flask url_for
def url_for(endpoint, **kwargs):
    # –ë–∞–∑–æ–≤—ã–µ mapping'–∏
    url_map = {
        'admin.create_admin': '/admin/create',
        'admin.dashboard': '/admin/dashboard',
        'orders.orders_list': '/orders/paid',
    }
    return url_map.get(endpoint, f'/{endpoint}')

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("backend.fast_app:app", host="0.0.0.0", port=5006, reload=True)
    