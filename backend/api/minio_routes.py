from flask import Blueprint, request, jsonify, Response, current_app, send_file

from datetime import timedelta

from utils.minio_client import minio_client

from database import db

import logging
import requests
import hashlib
import os



# –°–æ–∑–¥–∞–µ–º Blueprint –¥–ª—è MinIO —Ä–æ—É—Ç–æ–≤
minio_bp = Blueprint('minio', __name__)

logger = logging.getLogger(__name__)



# –ü–∞–ø–∫–∞ –¥–ª—è –∫—ç—à–∞
CACHE_DIR = "/tmp/minio_cache"
os.makedirs(CACHE_DIR, exist_ok=True)




def run_async(coro):
    """–ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é run_async –∏–∑ app"""
    return current_app.run_async(coro)



@minio_bp.route('/minio_proxy/<path:minio_path>')
def minio_proxy(minio_path):
    """–ü–†–û–°–¢–û–ô HTTP –ü–†–û–ö–°–ò –ë–ï–ó MINIO SDK"""
    try:
        print(f"üîç Minio proxy requested: {minio_path}")
        
        # –ü–†–Ø–ú–û–ô –î–û–°–¢–£–ü –ö MINIO UI (–ø–æ—Ä—Ç 9001)
        minio_url = f'http://localhost:9001/{minio_path}'
        
        # Basic auth 
        auth = (os.getenv('MINIO_ACCESS_KEY'), os.getenv('MINIO_SECRET_KEY'))
        
        response = requests.get(minio_url, auth=auth, timeout=10, stream=True)
        
        print(f"üì° Minio response status: {response.status_code}")
        
        if response.status_code == 200:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content type –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ñ–∞–π–ª–∞
            if minio_path.lower().endswith('.png'):
                content_type = 'image/png'
            elif minio_path.lower().endswith(('.jpg', '.jpeg')):
                content_type = 'image/jpeg'
            elif minio_path.lower().endswith('.gif'):
                content_type = 'image/gif'
            else:
                content_type = 'application/octet-stream'
            
            return Response(
                response.iter_content(chunk_size=8192),
                content_type=content_type,
                headers={
                    'Cache-Control': 'public, max-age=86400',
                    'Access-Control-Allow-Origin': '*'
                }
            )
        else:
            print(f"‚ùå Minio error: {response.text}")
            return jsonify({"error": "Image not found", "status": response.status_code}), 404
            
    except Exception as e:
        print(f"üí• Minio proxy error: {str(e)}")
        return jsonify({"error": "Server error"}), 500
    
    
    
@minio_bp.route('/debug_minio')
def debug_minio():
    """–ü–†–û–°–¢–ê–Ø –ü–†–û–í–ï–†–ö–ê MINIO"""
    try:
        # –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ Minio UI
        response = requests.get(
            'http://localhost:9001/journals/',
            auth = (os.getenv('MINIO_ACCESS_KEY'), os.getenv('MINIO_SECRET_KEY')),
            timeout=5
        )
        
        return f"""
        <h2>Minio Debug</h2>
        <p><b>Status:</b> {response.status_code}</p>
        <p><b>Content:</b></p>
        <pre>{response.text}</pre>
        """
        
    except Exception as e:
        return f"<h2>Error</h2><pre>{str(e)}</pre>"
    
    

@minio_bp.route('/get_presigned_url')
def get_presigned_url():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç presigned URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        path = request.args.get('path')
        if not path:
            return jsonify({"error": "Path parameter required"}), 400
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –µ—Å—Ç—å
        if path.startswith('journals/'):
            object_path = path[len('journals/'):]
        else:
            object_path = path
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º presigned URL
        presigned_url = minio_client.presigned_get_object(
            "journals",
            object_path,
            expires=timedelta(hours=24)
        )
        
        return jsonify({"presigned_url": presigned_url})
        
    except Exception as e:
        print(f"Error generating presigned URL: {e}")
        return jsonify({"error": str(e)}), 500
    
    
    
@minio_bp.route('/image_proxy/<path:image_path>')
def image_proxy(image_path):
    """–ü—Ä–æ–∫—Å–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å Minio (—Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—É CORS)"""
    try:
        print(f"üîç Image proxy requested: {image_path}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º presigned URL –Ω–∞–ø—Ä—è–º—É—é –∫ Minio
        presigned_url = minio_client.presigned_get_object(
            "journals",  # bucket name
            image_path,  # –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
            expires=timedelta(hours=24)
        )
        
        print(f"üì° Fetching from Minio: {presigned_url}")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ requests
        response = requests.get(presigned_url, timeout=10, stream=True)
        
        print(f"‚úÖ Minio response: {response.status_code}")
        
        if response.status_code == 200:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content type
            content_type = 'image/jpeg'
            if image_path.lower().endswith('.png'):
                content_type = 'image/png'
            elif image_path.lower().endswith('.gif'):
                content_type = 'image/gif'
            
            return Response(
                response.iter_content(chunk_size=8192),
                content_type=content_type,
                headers={
                    'Access-Control-Allow-Origin': '*',
                    'Cache-Control': 'public, max-age=86400'
                }
            )
        else:
            return jsonify({"error": "Image not found in Minio"}), 404
            
    except Exception as e:
        print(f"üí• Image proxy error: {e}")
        return jsonify({"error": str(e)}), 500
    
    
    
@minio_bp.route('/fast_image/<path:image_path>')
def fast_image(image_path):
    """–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∂—É—Ä–Ω–∞–ª–æ–≤"""
    try:
        print(f"üöÄ Fast image requested: {image_path}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º presigned URL
        presigned_url = minio_client.presigned_get_object(
            "journals", 
            image_path, 
            expires=timedelta(hours=24) 
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        response = requests.get(presigned_url, timeout=10, stream=True)
        
        if response.status_code == 200:
            # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –∏—Å–ø–æ–ª—å–∑—É–µ–º content-type –∏–∑ headers MinIO (–∫–∞–∫ –≤ fast_image_bot)
            content_type = response.headers.get('Content-Type', 'image/jpeg')
            
            # Fallback –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª—Å—è
            if not content_type.startswith('image/'):
                if image_path.lower().endswith('.png'):
                    content_type = 'image/png'
                elif image_path.lower().endswith('.gif'):
                    content_type = 'image/gif'
                else:
                    content_type = 'image/jpeg'
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º chunk size –¥–ª—è –±–æ–ª—å—à–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
            return Response(
                response.iter_content(chunk_size=32768),  # 32KB –≤–º–µ—Å—Ç–æ 8KB
                content_type=content_type,
                headers={
                    'Cache-Control': 'public, max-age=86400',
                    'Access-Control-Allow-Origin': '*',
                    'CDN-Cache-Control': 'public, max-age=86400'
                }
            )
        else:
            return jsonify({"error": "Image not found"}), 404
            
    except requests.exceptions.Timeout:
        print(f"‚è∞ Timeout fetching image: {image_path}")
        return jsonify({"error": "Timeout"}), 504
    except Exception as e:
        print(f"üí• Fast image error: {e}")
        return jsonify({"error": str(e)}), 500   



@minio_bp.route('/fast_image_bot/<path:image_path>')
def fast_image_bot(image_path):
    """–°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –±–æ—Ç–∞"""
    try:
        print(f"üöÄ Fast BOT image requested: {image_path}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º presigned URL
        presigned_url = minio_client.presigned_get_object(
            "journals-bot", 
            image_path, 
            expires=timedelta(hours=24)
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = requests.get(presigned_url, timeout=3, stream=True)
        
        print(f"üì° Minio response status: {response.status_code}")
        
        if response.status_code == 200:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content type
            content_type = response.headers.get('Content-Type', 'image/jpeg')
            if not content_type.startswith('image/'):
                if image_path.lower().endswith('.png'):
                    content_type = 'image/png'
                elif image_path.lower().endswith(('.jpg', '.jpeg')):
                    content_type = 'image/jpeg'
                elif image_path.lower().endswith('.gif'):
                    content_type = 'image/gif'
                else:
                    content_type = 'image/jpeg'
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            return Response(
                response.iter_content(chunk_size=8192),
                content_type=content_type,
                headers={
                    'Cache-Control': 'public, max-age=86400',
                    'Access-Control-Allow-Origin': '*',
                    'CDN-Cache-Control': 'public, max-age=86400'
                }
            )
        else:
            print(f"‚ùå Minio error: {response.text}")
            return jsonify({"error": "Image not found"}), 404
            
    except Exception as e:
        print(f"üí• Fast BOT image error: {e}")
        return jsonify({"error": str(e)}), 500
    
    
    
def list_objects_in_folder(folder_path):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ Minio"""
    try:
        objects = minio_client.list_objects("journals", prefix=folder_path + "/", recursive=True)
        file_names = []
        
        for obj in objects:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –ø—É—Ç–∏
            full_path = obj.object_name
            if full_path.endswith('/'):
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–∞–ø–∫–∏
                
            file_name = full_path.split('/')[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å –ø—É—Ç–∏
            file_names.append(file_name)
        
        print(f"üìÅ Found {len(file_names)} files in {folder_path}: {file_names}")
        return file_names
        
    except Exception as e:
        print(f"‚ùå Error listing objects in {folder_path}: {e}")
        return []
    
    
    

@minio_bp.route('/fast_bot_content/<path:image_path>')
def fast_bot_content(image_path):
    """–°—É–ø–µ—Ä-–±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –±–æ—Ç–∞ (–æ–ø–∏—Å–∞–Ω–∏–µ, –∫–æ–Ω—Ç–∞–∫—Ç—ã)"""
    try:
        print(f"üöÄ Fast BOT CONTENT image requested: {image_path}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º presigned URL –¥–ª—è –±–∞–∫–µ—Ç–∞ bot-content
        presigned_url = minio_client.presigned_get_object(
            "bot-content", 
            image_path, 
            expires=timedelta(hours=24)
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = requests.get(presigned_url, timeout=3, stream=True)
        
        print(f"üì° Minio response status: {response.status_code}")
        
        if response.status_code == 200:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º content type
            content_type = response.headers.get('Content-Type', 'image/jpeg')
            if not content_type.startswith('image/'):
                if image_path.lower().endswith('.png'):
                    content_type = 'image/png'
                elif image_path.lower().endswith(('.jpg', '.jpeg')):
                    content_type = 'image/jpeg'
                elif image_path.lower().endswith('.gif'):
                    content_type = 'image/gif'
                else:
                    content_type = 'image/jpeg'
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            return Response(
                response.iter_content(chunk_size=8192),
                content_type=content_type,
                headers={
                    'Cache-Control': 'public, max-age=86400',
                    'Access-Control-Allow-Origin': '*',
                    'CDN-Cache-Control': 'public, max-age=86400'
                }
            )
        else:
            print(f"‚ùå Minio error: {response.text}")
            return jsonify({"error": "Image not found"}), 404
            
    except Exception as e:
        print(f"üí• Fast BOT CONTENT image error: {e}")
        return jsonify({"error": str(e)}), 500
    
    
    
    
@minio_bp.route('/fast_bot_journal/<path:image_path>')
def fast_bot_journal(image_path):
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è –∂—É—Ä–Ω–∞–ª–æ–≤"""
    try:
        print(f"üöÄ Fast BOT JOURNAL: {image_path}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º presigned URL - –ë–ï–ó –ö–≠–®–ê –ù–ê –î–ò–°–ö–ï
        presigned_url = minio_client.presigned_get_object(
            "journals-bot", 
            image_path, 
            expires=timedelta(hours=24)
        )
        
        # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞–π–º–∞—É—Ç–æ–º
        response = requests.get(presigned_url, timeout=5, stream=True)
        
        print(f"üì° Minio response status: {response.status_code}")
        
        if response.status_code == 200:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º Content-Type –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é (–±—ã—Å—Ç—Ä–µ–µ —á–µ–º headers)
            if image_path.lower().endswith('.png'):
                content_type = 'image/png'
            elif image_path.lower().endswith(('.jpg', '.jpeg')):
                content_type = 'image/jpeg'
            elif image_path.lower().endswith('.gif'):
                content_type = 'image/gif'
            else:
                content_type = 'image/jpeg'
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–∑—É –±–µ–∑ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –¥–∏—Å–∫–µ
            return Response(
                response.iter_content(chunk_size=16384),
                content_type=content_type,
                headers={
                    'Cache-Control': 'public, max-age=3600', 
                    'Access-Control-Allow-Origin': '*'
                }
            )
        else:
            print(f"‚ùå Minio error: {response.status_code}")
            return jsonify({"error": "Image not found"}), 404
            
    except requests.exceptions.Timeout:
        print(f"‚è∞ Timeout fetching image: {image_path}")
        return jsonify({"error": "Timeout"}), 504
    except Exception as e:
        print(f"üí• Fast BOT JOURNAL error: {e}")
        return jsonify({"error": str(e)}), 500
    
    
    
    
