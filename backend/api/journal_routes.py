from flask import Blueprint, request, jsonify, current_app

from datetime import timedelta

from database import db
from utils.minio_client import minio_client

from authentication.jwt_auth.decorators import jwt_required

import logging



journal_bp = Blueprint('journal', __name__)


logger = logging.getLogger(__name__)




def run_async(coro):
    """–ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é run_async –∏–∑ app"""
    return current_app.run_async(coro)
        
        
        
        
@journal_bp.route('/')
def home():
    return """
    <h1>API –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–∞ –∂—É—Ä–Ω–∞–ª–æ–≤</h1>
    <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã:</p>
    <ul>
        <li><a href="/get_journal?id=1">/get_journal?id=1</a></li>
        <li><a href="/check_stock?journal_id=1&quantity=2">/check_stock?journal_id=1&quantity=2</a></li>
    </ul>
    """
            
        

@journal_bp.route('/get_journal_images')
def get_journal_images():
    try:
        journal_id = request.args.get('id')
        if not journal_id:
            return jsonify({"error": "Journal ID is required"}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∂—É—Ä–Ω–∞–ª–∞ –∏–∑ –ë–î
        images = run_async(db.fetch_all(
            "SELECT image_url FROM journal_images WHERE journal_id = %s ORDER BY is_main DESC, id",
            (journal_id,)
        ))
        
        response = jsonify({
            'images': [img['image_url'] for img in images],
            'count': len(images)
        })
        
        # –ó–∞–ø—Ä–µ—Ç –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        response.headers['Pragma'] = 'no-cache'
        response.headers['Expires'] = '0'
        
        return response
        
    except Exception as e:
        logger.error(f"Error getting images for journal {journal_id}: {str(e)}")
        return jsonify({'error': str(e)}), 500
    
    
    
@journal_bp.route('/get_journal')
def get_journal():
    try:
        journal_id = request.args.get('id')
        if not journal_id:
            return jsonify({"error": "Journal ID is required"}), 400
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î
        journal_data = run_async(db.fetch_one(
            "SELECT id, title, year, description, price, quantity FROM journals WHERE id = %s", 
            (journal_id,)
        ))
        
        if not journal_data:
            return jsonify({"error": "Journal not found"}), 404
        
        response = jsonify({
            'id': journal_data['id'],
            'title': journal_data['title'],
            'year': journal_data['year'],
            'description': journal_data['description'],
            'price': float(journal_data['price']),
            'quantity': int(journal_data['quantity'])
        })
        
        # –ó–ê–ü–†–ï–¢ –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
        response.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate'
        response.headers['Pragma'] = 'no-cache'
        response.headers['Expires'] = '0'
        
        return response
        
    except Exception as e:
        logger.error(f"Error getting journal {journal_id}: {str(e)}")
        return jsonify({'error': str(e)}), 500
    
    
    
@journal_bp.route('/get_presigned_url')
def get_presigned_url():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç presigned URL –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        path = request.args.get('path')
        if not path:
            return jsonify({"error": "Path parameter required"}), 400
        
        # –£–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –µ—Å–ª–∏ –µ—Å—Ç—å
        if path.startswith('journals/'):
            object_path = path[len('journals/'):]
        else:
            object_path = path
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º presigned URL
        presigned_url = minio_client.presigned_get_object(
            "journals",
            object_path,
            expires=timedelta(hours=24)
        )
        
        return jsonify({"presigned_url": presigned_url})
        
    except Exception as e:
        print(f"Error generating presigned URL: {e}")
        return jsonify({"error": str(e)}), 500
    
    
    
@journal_bp.route('/get_journal_images_presigned/<int:journal_id>')
def get_journal_images_presigned(journal_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ URL –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∂—É—Ä–Ω–∞–ª–∞ (–¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ –ë–î
        images = run_async(db.fetch_all(
            "SELECT image_url FROM journal_images WHERE journal_id = %s ORDER BY is_main DESC, id",
            (journal_id,)
        ))
        
        if not images:
            return jsonify({"images": []})
        
        fast_urls = []
        for img in images:
            image_url = img['image_url']
            
            # –ü–†–ï–û–ë–†–ê–ó–£–ï–ú –í –ë–´–°–¢–†–´–ï URL –î–õ–Ø –û–ë–´–ß–ù–´–• –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô
            if 'minio_proxy/journals/' in image_url:
                # –ò–∑: https://dismally-familiar-sharksucker.cloudpub.ru/minio_proxy/journals/journal_3/filename.png
                # –í: https://dismally-familiar-sharksucker.cloudpub.ru/fast_image/journal_3/filename.png
                object_path = image_url.split('minio_proxy/journals/')[1]
                fast_url = f"https://dismally-familiar-sharksucker.cloudpub.ru/fast_image/{object_path}"
                fast_urls.append(fast_url)
            elif 'fast_image/' in image_url:
                # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                fast_urls.append(image_url)
            else:
                # –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
                fast_urls.append(image_url)
        
        print(f"üöÄ Generated {len(fast_urls)} fast URLs for journal {journal_id} (mini-app)")
        print(f"üìã URLs: {fast_urls}")
        return jsonify({"images": fast_urls})
        
    except Exception as e:
        print(f"‚ùå Error getting fast URLs for mini-app: {e}")
        return jsonify({"error": str(e)}), 500
    
    
    
@journal_bp.route('/fix_journal_images/<int:journal_id>', methods=['POST'])
@jwt_required 
def fix_journal_images(journal_id):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∂—É—Ä–Ω–∞–ª–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    
    # üî• –ü–†–û–í–ï–†–ö–ê –ü–†–ê–í
    current_user = request.jwt_user
    if not current_user.get('is_staff'):
        return jsonify({"success": False, "error": "Insufficient permissions"}), 403
    
    connection = None
    cursor = None
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ URL –∏–∑ API
        response = get_journal_images_presigned(journal_id)
        correct_images = response.get_json()
        
        if not correct_images or 'images' not in correct_images:
            return jsonify({"success": False, "error": "No images found in API"})
        
        # üî• –ù–ê–ß–ò–ù–ê–ï–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–Æ
        connection = db.get_connection()
        cursor = connection.cursor(dictionary=True)
        connection.autocommit = False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            cursor.execute(
                "SELECT id, image_url FROM journal_images WHERE journal_id = %s ORDER BY id",
                (journal_id,)
            )
            current_images = cursor.fetchall()
            
            if not current_images:
                connection.rollback()
                return jsonify({"success": False, "error": "No images in database"})
            
            if len(current_images) != len(correct_images['images']):
                connection.rollback()
                return jsonify({
                    "success": False, 
                    "error": f"Image count mismatch: DB has {len(current_images)}, API has {len(correct_images['images'])}"
                })
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π URL –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            updated_count = 0
            for i, (db_image, correct_url) in enumerate(zip(current_images, correct_images['images'])):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ URL –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
                if db_image['image_url'] != correct_url:
                    cursor.execute(
                        "UPDATE journal_images SET image_url = %s WHERE id = %s",
                        (correct_url, db_image['id'])
                    )
                    print(f"‚úÖ Updated image {db_image['id']}: {correct_url}")
                    updated_count += 1
                else:
                    print(f"‚ÑπÔ∏è Image {db_image['id']} already has correct URL")
            
            # üî• –ö–û–ú–ú–ò–¢–ò–ú –¢–†–ê–ù–ó–ê–ö–¶–ò–Æ
            connection.commit()
            return jsonify({
                "success": True, 
                "updated": updated_count,
                "total": len(current_images)
            })
            
        except Exception as e:
            # üî• –û–¢–ö–ê–¢–´–í–ê–ï–ú –ü–†–ò –û–®–ò–ë–ö–ï
            if connection:
                connection.rollback()
            raise e
            
    except Exception as e:
        print(f"‚ùå Error fixing images: {e}")
        return jsonify({"success": False, "error": str(e)}), 500
        
    finally:
        # –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
        if cursor:
            cursor.close()
        if connection:
            connection.close()
    
    
    
@journal_bp.route('/debug_images/<int:journal_id>')
def debug_images(journal_id):
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ë–î
        images = run_async(db.fetch_all(
            "SELECT id, image_url FROM journal_images WHERE journal_id = %s",
            (journal_id,)
        ))
        
        result = {
            "journal_id": journal_id,
            "images_in_db": images,
            "presigned_urls": []
        }
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º presigned URLs
        for img in images:
            image_url = img['image_url']
            
            if 'minio_proxy/journals/' in image_url:
                object_path = image_url.split('minio_proxy/journals/')[1]
            else:
                object_path = image_url
            
            # –ü—Ä–æ–±—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å presigned URL
            try:
                presigned_url = minio_client.presigned_get_object(
                    "journals",
                    object_path,
                    expires=timedelta(hours=1)
                )
                result["presigned_urls"].append({
                    "original_url": image_url,
                    "object_path": object_path,
                    "presigned_url": presigned_url,
                    "status": "success"
                })
            except Exception as e:
                result["presigned_urls"].append({
                    "original_url": image_url,
                    "object_path": object_path,
                    "error": str(e),
                    "status": "failed"
                })
        
        return jsonify(result)
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500    
    


@journal_bp.route('/check_stock')
def check_stock():
    try:
        journal_id = request.args.get('journal_id', type=int)
        quantity = request.args.get('quantity', default=1, type=int)
        
        journal = run_async(db.fetch_one(
            "SELECT quantity FROM journals WHERE id = %s", 
            (journal_id,)
        ))
        
        if not journal:
            return jsonify({"error": "–ñ—É—Ä–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω"}), 404
        
        available = journal['quantity'] >= quantity
        return jsonify({
            "available": available,
            "in_stock": journal['quantity'],
            "required": quantity,
            "message": "–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ" if available else f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. –í –Ω–∞–ª–∏—á–∏–∏: {journal['quantity']}"
        })
        
    except Exception as e:
        return jsonify({"error": str(e)}), 500

    
    
    
# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–∞
def get_journal_title(journal_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –∏–∑ –ë–î"""
    try:
        result = run_async(db.fetch_one(
            "SELECT title FROM journals WHERE id = %s", 
            (journal_id,)
        ))
        return result['title'] if result else "–ñ—É—Ä–Ω–∞–ª"
    except Exception as e:
        logger.error(f"Error getting title for journal {journal_id}: {str(e)}")
        return "–ñ—É—Ä–Ω–∞–ª"



def get_journal_year(journal_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ –∏–∑ –ë–î"""
    try:
        result = run_async(db.fetch_one(
            "SELECT year FROM journals WHERE id = %s", 
            (journal_id,)
        ))
        return result['year'] if result else "‚Äî"
    except Exception as e:
        logger.error(f"Error getting year for journal {journal_id}: {str(e)}")
        return "‚Äî"



def get_journal_description(journal_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∂—É—Ä–Ω–∞–ª–∞ –∏–∑ –ë–î"""
    try:
        result = run_async(db.fetch_one(
            "SELECT description FROM journals WHERE id = %s", 
            (journal_id,)
        ))
        return result['description'] if result else "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    except Exception as e:
        logger.error(f"Error getting description for journal {journal_id}: {str(e)}")
        return "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"



def get_journal_price(journal_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∂—É—Ä–Ω–∞–ª–∞ –∏–∑ –ë–î"""
    try:
        result = run_async(db.fetch_one(
            "SELECT price FROM journals WHERE id = %s", 
            (journal_id,)
        ))
        return float(result['price']) if result else 0.0
    except Exception as e:
        logger.error(f"Error getting price for journal {journal_id}: {str(e)}")
        return 0.0



def get_journal_quantity(journal_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂—É—Ä–Ω–∞–ª–æ–≤ –∏–∑ –ë–î"""
    try:
        result = run_async(db.fetch_one(
            "SELECT quantity FROM journals WHERE id = %s", 
            (journal_id,)
        ))
        return int(result['quantity']) if result else 0
    except Exception as e:
        logger.error(f"Error getting quantity for journal {journal_id}: {str(e)}")
        return 0
    
    