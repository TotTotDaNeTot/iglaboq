from fastapi import APIRouter, Depends, HTTPException, Request, Form
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates

from utils.url_helpers import url_for

from authentication.jwt_auth.token_utils import get_current_user
from utils.minio_client import minio_client
from werkzeug.security import check_password_hash, generate_password_hash
import os
from datetime import datetime
import uuid
import jwt
import asyncio




templates: Jinja2Templates = None
db = None

router = APIRouter(prefix="", tags=["admin"])




# –†–æ—É—Ç—ã –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
@router.get("/dashboard", response_class=HTMLResponse)
async def dashboard(request: Request, token: str = None):

    current_user = request.state.user
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω –≤ URL (–¥–ª—è —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞)
    if token and not current_user:
        try:
            payload = jwt.decode(token, os.getenv('ADMIN_SECRET_KEY'), algorithms=["HS256"])
            # –ü—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º current_user
            print(f"üé´ Token from URL: {payload}")
        except Exception as e:
            print(f"‚ùå Invalid token from URL: {e}")
    
    print(f"üìä Dashboard user: {current_user}")
    
    return templates.TemplateResponse(
        "admin/dashboard.html", 
        {
            "request": request, 
            "user": current_user  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º request.state.user
        }
    )



@router.get("/create", response_class=HTMLResponse)
async def create_admin_page(request: Request):
    
    current_user = request.state.user
    
    if not current_user.get('is_staff', False):
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    
    return templates.TemplateResponse(
        "admin/create_admin.html", 
        {
            "request": request,
            "user": current_user 
        }
    )



@router.post("/create")
async def create_admin(
    request: Request,
    username: str = Form(...),
    password: str = Form(...),
    is_staff: bool = Form(False),
):
    current_user = request.state.user
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: Staff –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤ (is_staff=False)
    # –°—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª—é–±—ã—Ö
    if not current_user.get('is_staff', False):
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    
    # üîí –ó–ê–©–ò–¢–ê –û–¢ –°–û–ó–î–ê–ù–ò–Ø –°–£–ü–ï–†-–ê–î–ú–ò–ù–ê
    # –ù–∏–∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç
    # –î–∞–∂–µ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å is_superuser –≤ –∑–∞–ø—Ä–æ—Å–µ - –æ–Ω –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è
    
    # –ï—Å–ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å Staff (–Ω–æ –Ω–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω), –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ–Ω –Ω–µ —Å–æ–∑–¥–∞–µ—Ç Staff
    if current_user.get('is_staff', False) and not current_user.get('is_superuser', False):
        if is_staff:
            raise HTTPException(status_code=403, detail="Staff –∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö Staff –∞–¥–º–∏–Ω–æ–≤")
    
    try:
        password_hash = generate_password_hash(password)
        
        # üîí –Ø–í–ù–û –£–ö–ê–ó–´–í–ê–ï–ú is_superuser = FALSE –¥–ª—è –≤—Å–µ—Ö —Å–æ–∑–¥–∞–≤–∞–µ–º—ã—Ö –∞–¥–º–∏–Ω–æ–≤
        await db.execute(
            "INSERT INTO admins (username, password_hash, is_staff, is_superuser) VALUES (%s, %s, %s, %s)",
            (username, password_hash, is_staff, False)  # –í—Å–µ–≥–¥–∞ is_superuser = False
        )
        return RedirectResponse(url="/admin/list", status_code=303)
        
    except Exception as e:
        error_message = str(e)
        
        if "Duplicate entry" in error_message and "username" in error_message:
            user_friendly_error = f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å –∏–º–µ–Ω–µ–º '{username}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!"
        else:
            user_friendly_error = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {error_message}"
        
        return templates.TemplateResponse(
            "admin/create_admin.html", 
            {
                "request": request,
                "user": current_user,
                "error": user_friendly_error,
                "form_data": {
                    "username": username,
                    "is_staff": is_staff
                }
            }
        )
        


@router.get("/list", response_class=HTMLResponse)
async def admin_list(request: Request):
    
    current_user = request.state.user
    
    if not current_user.get('is_staff', False):
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    
    admins = await db.fetch_all("SELECT id, username, is_staff, is_superuser FROM admins ORDER BY is_superuser DESC, username")
    return templates.TemplateResponse(
        "admin/staff_list.html", 
        {
            "request": request, 
            "admins": admins,
            "user": current_user
        }
    )
    


@router.get("/bot-content", response_class=HTMLResponse)
async def bot_content_admin(request: Request):
    
    current_user = request.state.user
    
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –±–æ—Ç–∞"""
    try:
        # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        description_content, contacts_content = await asyncio.gather(
            db.fetch_one("SELECT * FROM bot_content WHERE content_type = 'description'"),
            db.fetch_one("SELECT * FROM bot_content WHERE content_type = 'contacts'"),
            return_exceptions=True
        )
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        if isinstance(description_content, Exception):
            print(f"Error loading description: {description_content}")
            description_content = None
        if isinstance(contacts_content, Exception):
            print(f"Error loading contacts: {contacts_content}")
            contacts_content = None
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        description_images = []
        contacts_images = []
        contacts_buttons = []
        
        if description_content:
            description_images = await db.fetch_all(
                "SELECT * FROM bot_images WHERE content_id = %s ORDER BY is_main DESC, id",
                (description_content['id'],)
            )
        
        if contacts_content:
            contacts_images, contacts_buttons = await asyncio.gather(
                db.fetch_all(
                    "SELECT * FROM bot_images WHERE content_id = %s ORDER BY is_main DESC, id",
                    (contacts_content['id'],)
                ),
                db.fetch_all(
                    "SELECT * FROM bot_buttons WHERE content_id = %s ORDER BY position",
                    (contacts_content['id'],)
                ),
                return_exceptions=True
            )
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏—è
            if isinstance(contacts_images, Exception):
                print(f"Error loading contacts images: {contacts_images}")
                contacts_images = []
            if isinstance(contacts_buttons, Exception):
                print(f"Error loading contacts buttons: {contacts_buttons}")
                contacts_buttons = []
        
        return templates.TemplateResponse(
            "bot/admin_bot_content.html",
            {
                "request": request,
                "user": current_user,
                "description_content": description_content,
                "description_images": description_images,
                "contacts_content": contacts_content,
                "contacts_images": contacts_images,
                "contacts_buttons": contacts_buttons
            }
        )
        
    except Exception as e:
        print(f"Error loading bot content: {e}")
        return templates.TemplateResponse(
            "bot/admin_bot_content.html",
            {
                "request": request,
                "user": current_user,
                "description_content": None,
                "description_images": [],
                "contacts_content": None,
                "contacts_images": [],
                "contacts_buttons": []
            }
        )
        


@router.get("/delete/{admin_id}")
async def delete_admin_page(
    request: Request,
    admin_id: int,
):
    
    current_user = request.state.user
    current_user_id = current_user.get('sub')
    
    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    if not current_user.get('is_staff', False):
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    
    admin = await db.fetch_one("SELECT * FROM admins WHERE id = %s", (admin_id,))
    if not admin:
        raise HTTPException(status_code=404, detail="Admin not found")
    
    # üî• –ù–ï–õ–¨–ó–Ø –£–î–ê–õ–ò–¢–¨ –°–ê–ú–û–ì–û –°–ï–ë–Ø
    if admin_id == current_user_id:
        raise HTTPException(status_code=403, detail="Cannot delete your own account")
    
    # üî• –ù–ï–õ–¨–ó–Ø –£–î–ê–õ–ò–¢–¨ –°–£–ü–ï–†-–ê–î–ú–ò–ù–ê (–í–û–û–ë–©–ï –ù–ò–ö–û–ú–£)
    if admin['is_superuser']:
        raise HTTPException(status_code=403, detail="Cannot delete super admin account")
    
    # üî• –û–ë–´–ß–ù–´–ô STAFF –ê–î–ú–ò–ù –ú–û–ñ–ï–¢ –£–î–ê–õ–Ø–¢–¨ –¢–û–õ–¨–ö–û –û–ë–´–ß–ù–´–• –ê–î–ú–ò–ù–û–í
    if not current_user.get('is_superuser', False) and admin['is_staff']:
        raise HTTPException(status_code=403, detail="Staff admins can only delete regular admins")

    return templates.TemplateResponse(
        "admin/delete_admin.html", 
        {
            "request": request,
            "user": current_user,
            "admin": admin
        }
    )



@router.post("/delete/{admin_id}")
async def delete_admin(
    request: Request,
    admin_id: int,
):
    current_user = request.state.user
    
    # üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞: —É–¥–∞–ª—è—Ç—å –º–æ–≥—É—Ç —Ç–æ–ª—å–∫–æ Staff –∏ –≤—ã—à–µ
    if not current_user.get('is_staff', False):
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        admin = await db.fetch_one("SELECT * FROM admins WHERE id = %s", (admin_id,))
        if not admin:
            raise HTTPException(status_code=404, detail="Admin not found")
        
        current_user_id = current_user.get('sub')
        
        # üîí –ù–ï–õ–¨–ó–Ø –£–î–ê–õ–ò–¢–¨ –°–ê–ú–û–ì–û –°–ï–ë–Ø
        if admin_id == current_user_id:
            raise HTTPException(status_code=403, detail="Cannot delete your own account")
        
        # üîí –ù–ï–õ–¨–ó–Ø –£–î–ê–õ–ò–¢–¨ –°–£–ü–ï–†-–ê–î–ú–ò–ù–ê (–í–û–û–ë–©–ï –ù–ò–ö–û–ú–£)
        if admin.get('is_superuser'):
            raise HTTPException(status_code=403, detail="Cannot delete super admin account")
        
        # üîí STAFF –ê–î–ú–ò–ù –ú–û–ñ–ï–¢ –£–î–ê–õ–Ø–¢–¨ –¢–û–õ–¨–ö–û –û–ë–´–ß–ù–´–• –ê–î–ú–ò–ù–û–í (–Ω–µ staff)
        if current_user.get('is_staff', False) and not current_user.get('is_superuser', False):
            if admin.get('is_staff'):
                raise HTTPException(status_code=403, detail="Staff admins can only delete regular admins")
        
        # ‚úÖ –£–î–ê–õ–ï–ù–ò–ï –†–ê–ó–†–ï–®–ï–ù–û
        await db.execute("DELETE FROM admins WHERE id = %s", (admin_id,))
        
        return RedirectResponse(url="/admin/list", status_code=303)
        
    except HTTPException:
        raise
    
    except Exception as e:
        return templates.TemplateResponse(
            "admin/admin_list.html", 
            {
                "request": request,
                "user": current_user,
                "error": f"Error deleting admin: {str(e)}"
            }
        )




@router.get("/edit/{admin_id}")
async def edit_admin_page(
    request: Request,
    admin_id: int,
):
    
    current_user = request.state.user
    current_user_id = current_user.get('sub')  # sub —Å–æ–¥–µ—Ä–∂–∏—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    """–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω–∞"""
    if not current_user.get('is_staff', False):
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    
    admin = await db.fetch_one("SELECT * FROM admins WHERE id = %s", (admin_id,))
    if not admin:
        raise HTTPException(status_code=404, detail="Admin not found")
    
    
    # üî• –ü–†–û–í–ï–†–ö–ê: –Ω–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–∞ (–∫—Ä–æ–º–µ —Å–∞–º–æ–≥–æ —Å–µ–±—è)
    if admin['is_superuser']:
        raise HTTPException(status_code=403, detail="Cannot edit super admin accounts")
    
    # üî• STAFF –ê–î–ú–ò–ù –ú–û–ñ–ï–¢ –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –¢–û–õ–¨–ö–û –û–ë–´–ß–ù–´–• –ê–î–ú–ò–ù–û–í
    if not current_user.get('is_superuser', False):  # –ï—Å–ª–∏ –ù–ï —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω
        if admin['is_staff']:  # –ò –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å staff –∞–¥–º–∏–Ω–∞
            raise HTTPException(status_code=403, detail="Staff admins can only edit regular admins")
        if admin_id == current_user_id:  # –ò –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–µ–±—è
            raise HTTPException(status_code=403, detail="Cannot edit your own account")
    
    return templates.TemplateResponse(
        "admin/edit_admin.html", 
        {
            "request": request,
            "user": current_user,
            "admin": admin
        }
    )




@router.post("/edit/{admin_id}")
async def edit_admin(
    request: Request,
    admin_id: int,
    password: str = Form(None),
    is_staff: bool = Form(False),
):
    current_user = request.state.user
    current_user_id = current_user.get('sub')
    
    if not current_user.get('is_staff', False):
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    
    try:
        # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–´–ô –¢–†–ê–ù–ó–ê–ö–¶–ò–û–ù–ù–´–ô –ú–ï–¢–û–î
        async with db.transaction() as cursor:
            # üîí –ë–õ–û–ö–ò–†–£–ï–ú –ê–î–ú–ò–ù–ê –ù–ê –ó–ê–ü–ò–°–¨
            await cursor.execute(
                "SELECT * FROM admins WHERE id = %s FOR UPDATE", 
                (admin_id,)
            )
            admin = await cursor.fetchone()
            
            if not admin:
                raise HTTPException(status_code=404, detail="Admin not found")
            
            # üîí –ó–ê–ü–†–ï–©–ê–ï–ú –†–ï–î–ê–ö–¢–ò–†–û–í–ê–¢–¨ –°–£–ü–ï–†-–ê–î–ú–ò–ù–ê
            if admin.get('is_superuser'):
                raise HTTPException(status_code=403, detail="–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            
            # üîí STAFF –ù–ï –ú–û–ñ–ï–¢ –î–ï–õ–ê–¢–¨ –î–†–£–ì–ò–• STAFF
            if current_user.get('is_staff', False) and not current_user.get('is_superuser', False):
                if is_staff:
                    raise HTTPException(status_code=403, detail="Staff –∞–¥–º–∏–Ω –Ω–µ –º–æ–∂–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥—Ä—É–≥–∏—Ö Staff –∞–¥–º–∏–Ω–æ–≤")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
            if not current_user.get('is_superuser', False):
                if admin['is_staff']:
                    raise HTTPException(status_code=403, detail="Staff admins can only edit regular admins")
                if admin_id == current_user_id:
                    raise HTTPException(status_code=403, detail="Cannot edit your own account")
            
            can_edit_staff = current_user.get('is_superuser', False)
            
            # üîß –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•
            if password:
                password_hash = generate_password_hash(password)
                
                if can_edit_staff:
                    await cursor.execute(
                        "UPDATE admins SET password_hash = %s, is_staff = %s WHERE id = %s",
                        (password_hash, is_staff, admin_id)
                    )
                    print(f"‚úÖ Updated password and is_staff for admin {admin_id}")
                else:
                    await cursor.execute(
                        "UPDATE admins SET password_hash = %s WHERE id = %s",
                        (password_hash, admin_id)
                    )
                    print(f"‚úÖ Updated password for admin {admin_id}")
                    
            else:
                if can_edit_staff and (is_staff != admin['is_staff']):
                    await cursor.execute(
                        "UPDATE admins SET is_staff = %s WHERE id = %s",
                        (is_staff, admin_id)
                    )
                    print(f"‚úÖ Updated is_staff to {is_staff} for admin {admin_id}")
        
        return RedirectResponse(url="/admin/list", status_code=303)
        
    except HTTPException:
        raise
    
    except Exception as e:
        admin = await db.fetch_one("SELECT * FROM admins WHERE id = %s", (admin_id,))
        return templates.TemplateResponse(
            "admin/edit_admin.html", 
            {
                "request": request,
                "user": current_user,
                "admin": admin,
                "error": f"Error updating admin: {str(e)}"
            }
        )

  
        
